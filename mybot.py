import telebot
import random
from datetime import datetime

bot = telebot.TeleBot("7871511906:AAH8hz3f0X2WeihbXz7VDx_yBSM3Sl_BRDQ")

user_data = {} 

def get_user(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            "coins": 100,
            "donations": [],
            "level": 1,
            "exp": 0,
            "last_daily": None,
            "last_wheel": None,
            "echo_mode": False  
        }
    return user_data[user_id]

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, " –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ —è —É–º–µ—é .")

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!

üü¢ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –Ω–∞—á–∞—Ç—å —á–∞—Ç
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

üîÅ –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏:
/echo on ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏"
/echo off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏"

üîß Edit Bots (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ @BotFather):
/setname ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –±–æ—Ç–∞
/setdescription ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
/setabouttext ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "About"
/setuserpic ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
/setcommands ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/deletebot ‚Äî —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞

‚öôÔ∏è Bot Settings (—Ç–æ–∂–µ —á–µ—Ä–µ–∑ @BotFather):
/token ‚Äî –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
/revoke ‚Äî –æ—Ç–æ–∑–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
/setinline ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å inline-—Ä–µ–∂–∏–º
/setinlinegeo ‚Äî –∑–∞–ø—Ä–æ—Å—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ inline-—Ä–µ–∂–∏–º–µ
/setinlinefeedback ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ inline-—Ä–µ–∂–∏–º–µ
/setjoingroups ‚Äî –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—ã?
/setprivacy ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö

üéÆ –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/donate ‚Äî –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
/test_donate ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–∞—Ç
/mydonations ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ç–æ–≤
/balance ‚Äî –º–æ–π –±–∞–ª–∞–Ω—Å
/top ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
/bet [—Å—É–º–º–∞] ‚Äî —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
/jackpot [—Å—É–º–º–∞] ‚Äî –ø–æ–ø—Ä–æ–±—É–π —É–¥–∞—á—É –≤ –¥–∂–µ–∫–ø√≥—Ç–µ
/wheel ‚Äî –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã
/daily ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∏–≥—Ä–∞
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['echo'])
def toggle_echo(message):
    data = get_user(message)
    args = message.text.split()

    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ on –∏–ª–∏ off. –ù–∞–ø—Ä–∏–º–µ—Ä: /echo on")
        return

    mode = args[1].lower()
    if mode == "on":
        data["echo_mode"] = True
        bot.reply_to(message, "üîÅ –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏ –≤–∫–ª—é—á—ë–Ω. –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —è –±—É–¥—É –ø–æ–≤—Ç–æ—Ä—è—Ç—å!")
    elif mode == "off":
        data["echo_mode"] = False
        bot.reply_to(message, "üõë –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π on –∏–ª–∏ off.")

@bot.message_handler(func=lambda m: True)
def echo_all(message):
    data = get_user(message)
    if data.get("echo_mode", False):
        bot.reply_to(message, message.text)

@bot.message_handler(commands=['donate'])
def donate(message):
    bot.reply_to(message, """
üåü –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è —á–µ—Ä–µ–∑ Telegram Stars!
–ö–∞–∂–¥—ã–π –¥–æ–Ω–∞—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π:
- +100 –º–æ–Ω–µ—Ç
- –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã

–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–µ–Ω–∏—è!

üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/test_donate`
""")

@bot.message_handler(commands=['test_donate'])
def test_donate(message):
    amount = 50  # –∑–≤—ë–∑–¥–æ—á–µ–∫
    give_rewards(message, amount)
    bot.reply_to(message, f"üåü –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–∞—Ç –Ω–∞ {amount} –∑–≤—ë–∑–¥–æ—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!")

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(query):
    bot.answer_pre_checkout_query(query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    amount = message.successful_payment.total_amount // 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ –∑–≤—ë–∑–¥–æ—á–∫–∏
    bot.send_message(message.chat.id, f"üåü –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ü–æ–ª—É—á–µ–Ω–æ {amount} –∑–≤—ë–∑–¥–æ—á–µ–∫.")
    give_rewards(message, amount)

def give_rewards(message, amount: int):
    data = get_user(message)
    coins = amount * 10  
    data["coins"] += coins
    data["donations"].append({
        "stars": amount,
        "coins_received": coins,
        "date": str(datetime.now())
    })
    bot.reply_to(message, f"üéÅ –ó–∞ {amount} –∑–≤—ë–∑–¥–æ—á–µ–∫ —Ç—ã –ø–æ–ª—É—á–∏–ª(–∞) {coins} –º–æ–Ω–µ—Ç!")

@bot.message_handler(commands=['mydonations'])
def my_donations(message):
    data = get_user(message)
    donations = data.get("donations", [])
    if not donations:
        bot.reply_to(message, "üò¢ –£ —Ç–µ–±—è –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–æ–Ω–∞—Ç–æ–≤.")
        return

    reply = "üßæ –ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –¥–æ–Ω–∞—Ç–æ–≤:\n\n"
    for d in donations:
        reply += f"‚≠ê {d['stars']} –∑–≤—ë–∑–¥ ‚Üí üí∞ +{d['coins_received']} –º–æ–Ω–µ—Ç\n"
        reply += f"üìÖ {d['date']}\n\n"

    bot.reply_to(message, reply)

@bot.message_handler(commands=['balance'])
def balance(message):
    data = get_user(message)
    bot.reply_to(message, f"üí∞ –£ —Ç–µ–±—è {data['coins']} –º–æ–Ω–µ—Ç.")

@bot.message_handler(commands=['top'])
def top_players(message):
    sorted_users = sorted(
        [(uid, d["coins"], d["level"]) for uid, d in user_data.items()],
        key=lambda x: (-x[1], -x[2])
    )[:10]
    reply = "üèÜ –¢–û–ü –ò–ì–†–û–ö–û–í:\n"
    for i, (uid, coins, level) in enumerate(sorted_users, start=1):
        name = user_data.get(uid, {}).get("name", "–ò–≥—Ä–æ–∫")
        reply += f"{i}. {name} ‚Äî {coins} –º–æ–Ω–µ—Ç (–£—Ä–æ–≤–µ–Ω—å {level})\n"
    bot.reply_to(message, reply)

@bot.message_handler(commands=['daily'])
def daily_game(message):
    data = get_user(message)
    today = datetime.now().date()

    last = data.get("last_daily")
    if last and (datetime.fromisoformat(last).date() == today):
        bot.reply_to(message, "‚ùå –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –∏–≥—Ä–∞–ª. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!")
        return

    result = random.choice(["win", "lose"])
    reward = 50
    if result == "win":
        data["coins"] += reward
        data["last_daily"] = str(today)
        bot.reply_to(message, f"üéâ –¢–µ–±–µ –ø–æ–≤–µ–∑–ª–æ! +{reward} –º–æ–Ω–µ—Ç.")
    else:
        bot.reply_to(message, "üò¢ –§–æ—Ä—Ç—É–Ω–∞ –Ω–µ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.")

@bot.message_handler(commands=['casino'])
def casino(message):
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç: –∫—Ä–∞—Å–Ω–æ–µ –∏–ª–∏ —á—ë—Ä–Ω–æ–µ")
        return

    color = args[1].lower()
    if color not in ["–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ"]:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –∫—Ä–∞—Å–Ω–æ–µ –∏–ª–∏ —á—ë—Ä–Ω–æ–µ")
        return

    bot.reply_to(message, "üé∞ –ö—Ä—É—á—É —Ä—É–ª–µ—Ç–∫—É...")
    winning_color = random.choice(["–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ"])

    @bot.send_chat_action(message.chat.id, 'typing')
    def play_casino():
        if color == winning_color:
            get_user(message)["coins"] += 100
            bot.reply_to(message, f"üéâ –í—ã–ø–∞–ª–æ **{winning_color}**! –¢—ã –≤—ã–∏–≥—Ä–∞–ª(–∞) 100 –º–æ–Ω–µ—Ç!")
        else:
            bot.reply_to(message, f"üò¢ –í—ã–ø–∞–ª–æ **{winning_color}**. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞).")

    play_casino()

@bot.message_handler(commands=['jackpot'])
def jackpot(message):
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    try:
        amount = int(args[1])
    except:
        bot.reply_to(message, "‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ.")
        return

    data = get_user(message)
    if amount > data["coins"]:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    bot.reply_to(message, "üé∞ –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É...")

    win_chance = 0.1  
    if random.random() < win_chance:
        prize = amount * 3  
        data["coins"] += prize
        bot.reply_to(message, f"üî• –î–∂–µ–∫–ø–æ—Ç! –¢—ã –≤—ã–∏–≥—Ä–∞–ª(–∞) {prize} –º–æ–Ω–µ—Ç!")
    else:
        data["coins"] -= amount
        bot.reply_to(message, f"üò¢ –ü—Ä–æ–º–∞—Ö... –¢—ã –ø–æ—Ç–µ—Ä—è–ª(–∞) {amount} –º–æ–Ω–µ—Ç.")

@bot.message_handler(commands=['wheel'])
def wheel_of_fortune(message):
    data = get_user(message)
    now = datetime.now()

    last_spin = data.get("last_wheel")
    if last_spin:
        last_time = datetime.fromisoformat(last_spin)
        if (now - last_time).days < 1:
            bot.reply_to(message, "‚è≥ –ö–æ–ª–µ—Å–æ –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å.")
            return

    rewards = [
        {"text": "–∑–æ–ª–æ—Ç–æ–π —Å–ª–∏—Ç–æ–∫", "coins": 100},
        {"text": "–º–æ–Ω–µ—Ç–Ω—ã–π –º–µ—à–æ–∫", "coins": 50},
        {"text": "–Ω–∏—á–µ–≥–æ", "coins": 0},
        {"text": "—É–¥–∞—á–∞", "coins": 30},
        {"text": "–±–æ–≥–∞—Ç—Å—Ç–≤–æ", "coins": 75}
    ]

    reward = random.choice(rewards)
    data["coins"] += reward["coins"]
    data["last_wheel"] = str(now)

    bot.reply_to(message, f"üé° –¢—ã –∫—Ä—É—Ç–∏—à—å –∫–æ–ª–µ—Å–æ...\nüéÅ –í—ã–ø–∞–ª–æ: **{reward['text']}** (+{reward['coins']} –º–æ–Ω–µ—Ç)")

@bot.message_handler(commands=['bet'])
def bet(message):
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    try:
        amount = int(args[1])
    except:
        bot.reply_to(message, "‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ.")
        return

    data = get_user(message)
    if amount > data["coins"]:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    win = random.random() < 0.4  
    if win:
        data["coins"] += amount
        bot.reply_to(message, f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª(–∞)! +{amount} –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {data['coins']}")
    else:
        data["coins"] -= amount
        bot.reply_to(message, f"üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞)... -{amount} –º–æ–Ω–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å {data['coins']}")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(non_stop=False)